spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/order-service
spring.datasource.username=root
spring.jpa.hibernate.ddl-auto=update

server.port=8082
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
spring.application.name=order-service

management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

#Resilience4J Properties

#See different states of the circuit breaker - closed, open, half open.
resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true

#How much buffer size for events
resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10

#Use Sliding window algo to determine when to open or close(Like we can specify no. of sec)
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED

#After 5 failed requests the circuit breaker will change state to open
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=5

#If 50% of the calls are failed then changes to open state
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50

#How much time we can wait in open state, before going to half open state(To execute fall-back logic)
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5s

#No. of calls, it has to pass in half open state to change to closed state or open state if fails
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3

#Will enable automatic transition from open to half open
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true


#Resilience4J Timeout Properties

#Will throw timeout exception after 3s. Eg- slow internet
resilience4j.timelimiter.instances.inventory.timeout-duration=3s

#Resilience4J Retry Properties

#Make max of 3 retry attempts after timeout.
resilience4j.retry.instances.inventory.max-attempts=3

#Wait for 5s before retry.
resilience4j.retry.instances.inventory.wait-duration=5s

management.zipkin.tracing.endpoint=http://localhost:9411/api/v2/spans
management.tracing.sampling.probability=1.0

# Kafka Properties
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.template.default-topic=notificationTopic
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.properties.spring.json.type.mapping=event:com.programmingtechie.orderservice.event.OrderPlacedEvent
